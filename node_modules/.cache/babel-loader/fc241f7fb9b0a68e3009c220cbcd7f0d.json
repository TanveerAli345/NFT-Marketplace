{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Users\\\\tanve\\\\OneDrive\\\\Desktop\\\\nft-marketplace-starter-kit\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"C:\\\\Users\\\\tanve\\\\OneDrive\\\\Desktop\\\\nft-marketplace-starter-kit\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\tanve\\\\OneDrive\\\\Desktop\\\\nft-marketplace-starter-kit\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:\\\\Users\\\\tanve\\\\OneDrive\\\\Desktop\\\\nft-marketplace-starter-kit\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\tanve\\\\OneDrive\\\\Desktop\\\\nft-marketplace-starter-kit\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\tanve\\\\OneDrive\\\\Desktop\\\\nft-marketplace-starter-kit\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _createClass from \"C:\\\\Users\\\\tanve\\\\OneDrive\\\\Desktop\\\\nft-marketplace-starter-kit\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"C:\\\\Users\\\\tanve\\\\OneDrive\\\\Desktop\\\\nft-marketplace-starter-kit\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\tanve\\\\OneDrive\\\\Desktop\\\\nft-marketplace-starter-kit\\\\src\\\\components\\\\App.js\";\nimport React, { Component } from \"react\";\nimport Web3 from \"web3\";\nimport detectEthereumProvider from \"@metamask/detect-provider\";\nimport KryptoBird from '../abis/KryptoBird.json';\nimport { MDBCard, MDBCardBody, MDBCardTitle, MDBCardText, MDBCardImage, MDBBtn } from 'mdb-react-ui-kit';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.loadWeb3();\n\n              case 2:\n                _context.next = 4;\n                return this.loadBlockchainData();\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }() // first detect an ethereum provider\n\n  }, {\n    key: \"loadWeb3\",\n    value: function () {\n      var _loadWeb = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        var provider;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return detectEthereumProvider();\n\n              case 2:\n                provider = _context2.sent;\n\n                // check for modern browsers\n                //if there is a provider then lets log that its working and set web3\n                if (provider) {\n                  console.log('ethereum wallet is connected');\n                  window.web3 = new Web3(provider);\n                } else {\n                  console.log('no ethereum wallet detected');\n                }\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function loadWeb3() {\n        return _loadWeb.apply(this, arguments);\n      }\n\n      return loadWeb3;\n    }()\n  }, {\n    key: \"loadBlockchainData\",\n    value: function () {\n      var _loadBlockchainData = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3() {\n        var web3, accounts, networkId, networkData, abi, address, contract, totalSupply, i, kryptoBird;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                web3 = window.web3;\n                _context3.next = 3;\n                return window.web3.eth.requestAccounts();\n\n              case 3:\n                accounts = _context3.sent;\n                this.setState({\n                  account: accounts[0]\n                });\n                _context3.next = 7;\n                return web3.eth.net.getId();\n\n              case 7:\n                networkId = _context3.sent;\n                networkData = KryptoBird.networks[networkId];\n\n                if (!networkData) {\n                  _context3.next = 29;\n                  break;\n                }\n\n                abi = KryptoBird.abi;\n                address = networkData.address;\n                contract = new web3.eth.Contract(abi, address);\n                this.setState({\n                  contract: contract\n                });\n                _context3.next = 16;\n                return contract.methods.totalSupply().call();\n\n              case 16:\n                totalSupply = _context3.sent;\n                this.setState({\n                  totalSupply: totalSupply\n                });\n                i = 1;\n\n              case 19:\n                if (!(i <= totalSupply)) {\n                  _context3.next = 27;\n                  break;\n                }\n\n                _context3.next = 22;\n                return contract.methods.kryptoBirdz(i - 1).call();\n\n              case 22:\n                kryptoBird = _context3.sent;\n                this.setState({\n                  kryptoBirdz: [].concat(_toConsumableArray(this.state.kryptoBirdz), [kryptoBird])\n                });\n\n              case 24:\n                i++;\n                _context3.next = 19;\n                break;\n\n              case 27:\n                _context3.next = 30;\n                break;\n\n              case 29:\n                window.alert('Smart contract not deployed');\n\n              case 30:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function loadBlockchainData() {\n        return _loadBlockchainData.apply(this, arguments);\n      }\n\n      return loadBlockchainData;\n    }()\n  }]);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n\n    _this.mint = function (kryptoBird) {\n      _this.state.contract.methods.mint(kryptoBird).send({\n        from: _this.state.account\n      }).once('receipt', function (receipt) {\n        _this.setState({\n          kryptoBirdz: [].concat(_toConsumableArray(_this.state.kryptoBirdz), [kryptoBird])\n        });\n      });\n    };\n\n    _this.state = {\n      account: '',\n      contract: null,\n      totalSupply: 0,\n      kryptoBirdz: []\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, console.log(this.state.kryptoBirdz), React.createElement(\"nav\", {\n        className: \"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"navbar-brand col-sm-3 col-md-3 mr-0\",\n        style: {\n          color: 'white'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, \"NFT Marketplace!\"), React.createElement(\"ul\", {\n        className: \"navbar-nav px-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }, React.createElement(\"li\", {\n        className: \"nav-item text-nowrap d-none d-sm-none d-sm-block\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }, React.createElement(\"small\", {\n        className: \"text-white\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }, this.state.account)))), React.createElement(\"div\", {\n        className: \"container-fluid mt-1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, React.createElement(\"main\", {\n        role: \"main\",\n        className: \"col-lg-12 d-flex text-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"content mr-auto ml-auto\",\n        style: {\n          opacity: '0.8'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        style: {\n          color: 'white'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }, \"G8 - NFT Marketplace\"), React.createElement(\"form\", {\n        onSubmit: function onSubmit(event) {\n          event.preventDefault();\n          var kryptoBird = _this2.kryptoBird.value;\n\n          _this2.mint(kryptoBird);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"text\",\n        placeholder: \"Add file location\",\n        className: \"form-control mb-1\",\n        ref: function ref(input) {\n          return _this2.kryptoBird = input;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        type: \"submit\",\n        className: \"btn btn-primary btn-black\",\n        value: \"MINT\",\n        style: {\n          margin: '6px'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }))))), React.createElement(\"hr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"row textCenter\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }, this.state.kryptoBirdz.map(function (kryptoBird, key) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 114\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 115\n          },\n          __self: this\n        }, React.createElement(MDBCard, {\n          className: \"token img\",\n          height: \"250rem\",\n          style: {\n            maxWidth: '22rem'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 116\n          },\n          __self: this\n        }), React.createElement(MDBCardImage, {\n          src: kryptoBird,\n          position: \"top\",\n          style: {\n            marginRight: '4px'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 117\n          },\n          __self: this\n        }), React.createElement(MDBCardBody, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 118\n          },\n          __self: this\n        }, React.createElement(MDBCardTitle, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 119\n          },\n          __self: this\n        }, \"Anime Art\"), React.createElement(MDBCardText, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 120\n          },\n          __self: this\n        }, \"The description is hardcoded for now. Note: The download button only downloads the image file onto the user's system, it DOES NOT transfer the NFT ownership.\"), React.createElement(MDBBtn, {\n          href: kryptoBird,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 123\n          },\n          __self: this\n        }, \"Download\"))));\n      }))));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["C:\\Users\\tanve\\OneDrive\\Desktop\\nft-marketplace-starter-kit\\src\\components\\App.js"],"names":["React","Component","Web3","detectEthereumProvider","KryptoBird","MDBCard","MDBCardBody","MDBCardTitle","MDBCardText","MDBCardImage","MDBBtn","App","loadWeb3","loadBlockchainData","provider","console","log","window","web3","eth","requestAccounts","accounts","setState","account","net","getId","networkId","networkData","networks","abi","address","contract","Contract","methods","totalSupply","call","i","kryptoBirdz","kryptoBird","state","alert","props","mint","send","from","once","receipt","color","opacity","event","preventDefault","value","input","margin","map","key","maxWidth","marginRight"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,sBAAP,MAAmC,2BAAnC;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,SAAQC,OAAR,EAAiBC,WAAjB,EAA8BC,YAA9B,EAA4CC,WAA5C,EAAyDC,YAAzD,EAAuEC,MAAvE,QAAoF,kBAApF;;IAEMC,G;;;;;;;;;;;;;;;;uBAGQ,KAAKC,QAAL,E;;;;uBACA,KAAKC,kBAAL,E;;;;;;;;;;;;;;;QAGV;;;;;;;;;;;;;;uBAE2BV,sBAAsB,E;;;AAAvCW,gBAAAA,Q;;AAEN;AACA;AACA,oBAAGA,QAAH,EAAa;AACTC,kBAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ;AACAC,kBAAAA,MAAM,CAACC,IAAP,GAAc,IAAIhB,IAAJ,CAASY,QAAT,CAAd;AACH,iBAHD,MAGO;AACHC,kBAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ;AACH;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIKE,gBAAAA,I,GAAOD,MAAM,CAACC,I;;uBACGD,MAAM,CAACC,IAAP,CAAYC,GAAZ,CAAgBC,eAAhB,E;;;AAAjBC,gBAAAA,Q;AACN,qBAAKC,QAAL,CAAc;AAACC,kBAAAA,OAAO,EAACF,QAAQ,CAAC,CAAD;AAAjB,iBAAd;;uBAEwBH,IAAI,CAACC,GAAL,CAASK,GAAT,CAAaC,KAAb,E;;;AAAlBC,gBAAAA,S;AACAC,gBAAAA,W,GAAcvB,UAAU,CAACwB,QAAX,CAAoBF,SAApB,C;;qBAEjBC,W;;;;;AACOE,gBAAAA,G,GAAMzB,UAAU,CAACyB,G;AACjBC,gBAAAA,O,GAAUH,WAAW,CAACG,O;AACtBC,gBAAAA,Q,GAAW,IAAIb,IAAI,CAACC,GAAL,CAASa,QAAb,CAAsBH,GAAtB,EAA2BC,OAA3B,C;AACjB,qBAAKR,QAAL,CAAc;AAACS,kBAAAA,QAAQ,EAARA;AAAD,iBAAd;;uBAE0BA,QAAQ,CAACE,OAAT,CAAiBC,WAAjB,GAA+BC,IAA/B,E;;;AAApBD,gBAAAA,W;AACN,qBAAKZ,QAAL,CAAc;AAACY,kBAAAA,WAAW,EAAXA;AAAD,iBAAd;AAEQE,gBAAAA,C,GAAE,C;;;sBAAGA,CAAC,IAAEF,W;;;;;;uBACaH,QAAQ,CAACE,OAAT,CAAiBI,WAAjB,CAA6BD,CAAC,GAAC,CAA/B,EAAkCD,IAAlC,E;;;AAAnBG,gBAAAA,U;AACN,qBAAKhB,QAAL,CAAc;AACVe,kBAAAA,WAAW,+BAAK,KAAKE,KAAL,CAAWF,WAAhB,IAA6BC,UAA7B;AADD,iBAAd;;;AAFyBF,gBAAAA,CAAC,E;;;;;;;;;AAO9BnB,gBAAAA,MAAM,CAACuB,KAAP,CAAa,6BAAb;;;;;;;;;;;;;;;;;;AAYR,eAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,6EAAMA,KAAN;;AADe,UARnBC,IAQmB,GARZ,UAACJ,UAAD,EAAgB;AACnB,YAAKC,KAAL,CAAWR,QAAX,CAAoBE,OAApB,CAA4BS,IAA5B,CAAiCJ,UAAjC,EAA6CK,IAA7C,CAAkD;AAACC,QAAAA,IAAI,EAAC,MAAKL,KAAL,CAAWhB;AAAjB,OAAlD,EAA6EsB,IAA7E,CAAkF,SAAlF,EAA6F,UAACC,OAAD,EAAa;AACtG,cAAKxB,QAAL,CAAc;AACVe,UAAAA,WAAW,+BAAK,MAAKE,KAAL,CAAWF,WAAhB,IAA6BC,UAA7B;AADD,SAAd;AAGH,OAJD;AAKH,KAEkB;;AAEf,UAAKC,KAAL,GAAa;AACThB,MAAAA,OAAO,EAAE,EADA;AAETQ,MAAAA,QAAQ,EAAE,IAFD;AAGTG,MAAAA,WAAW,EAAE,CAHJ;AAITG,MAAAA,WAAW,EAAE;AAJJ,KAAb;AAFe;AAQlB;;;;6BAEQ;AAAA;;AACL,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACKtB,OAAO,CAACC,GAAR,CAAY,KAAKuB,KAAL,CAAWF,WAAvB,CADL,EAEI;AAAK,QAAA,SAAS,EAAC,gEAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAK,QAAA,SAAS,EAAC,qCAAf;AAAqD,QAAA,KAAK,EAAE;AAACU,UAAAA,KAAK,EAAC;AAAP,SAA5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BADJ,EAII;AAAI,QAAA,SAAS,EAAC,iBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAI,QAAA,SAAS,EAAC,kDAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAO,QAAA,SAAS,EAAC,YAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACK,KAAKR,KAAL,CAAWhB,OADhB,CADJ,CADJ,CAJJ,CAFJ,EAcI;AAAK,QAAA,SAAS,EAAC,sBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAM,QAAA,IAAI,EAAC,MAAX;AAAkB,QAAA,SAAS,EAAC,8BAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAK,QAAA,SAAS,EAAC,yBAAf;AAAyC,QAAA,KAAK,EAAE;AAACyB,UAAAA,OAAO,EAAE;AAAV,SAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAI,QAAA,KAAK,EAAE;AAACD,UAAAA,KAAK,EAAE;AAAR,SAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCADJ,EAGI;AAAM,QAAA,QAAQ,EAAE,kBAACE,KAAD,EAAW;AACvBA,UAAAA,KAAK,CAACC,cAAN;AACA,cAAMZ,UAAU,GAAG,MAAI,CAACA,UAAL,CAAgBa,KAAnC;;AACA,UAAA,MAAI,CAACT,IAAL,CAAUJ,UAAV;AACH,SAJD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAKI;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,WAAW,EAAC,mBAA/B;AACA,QAAA,SAAS,EAAC,mBADV;AAEA,QAAA,GAAG,EAAE,aAACc,KAAD;AAAA,iBAAW,MAAI,CAACd,UAAL,GAAkBc,KAA7B;AAAA,SAFL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QALJ,EAQI;AAAO,QAAA,IAAI,EAAC,QAAZ;AAAqB,QAAA,SAAS,EAAC,2BAA/B;AACA,QAAA,KAAK,EAAC,MADN;AACa,QAAA,KAAK,EAAE;AAACC,UAAAA,MAAM,EAAE;AAAT,SADpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QARJ,CAHJ,CADJ,CADJ,CADJ,EAoBI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QApBJ,EAqBI;AAAK,QAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACK,KAAKd,KAAL,CAAWF,WAAX,CAAuBiB,GAAvB,CAA2B,UAAChB,UAAD,EAAaiB,GAAb,EAAqB;AAC7C,eACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI,oBAAC,OAAD;AAAS,UAAA,SAAS,EAAC,WAAnB;AAA+B,UAAA,MAAM,EAAC,QAAtC;AAA+C,UAAA,KAAK,EAAE;AAACC,YAAAA,QAAQ,EAAC;AAAV,WAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ,EAEI,oBAAC,YAAD;AAAc,UAAA,GAAG,EAAElB,UAAnB;AAA+B,UAAA,QAAQ,EAAC,KAAxC;AAA8C,UAAA,KAAK,EAAE;AAACmB,YAAAA,WAAW,EAAE;AAAd,WAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAFJ,EAGI,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADJ,EAEI,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2KAFJ,EAKI,oBAAC,MAAD;AAAQ,UAAA,IAAI,EAAEnB,UAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBALJ,CAHJ,CADJ,CADJ;AAeH,OAhBA,CADL,CArBJ,CAdJ,CADJ;AA0DH;;;;EA9HarC,S;;AAkIlB,eAAeU,GAAf","sourcesContent":["import React, { Component } from \"react\";\r\nimport Web3 from \"web3\";\r\nimport detectEthereumProvider from \"@metamask/detect-provider\";\r\nimport KryptoBird from '../abis/KryptoBird.json';\r\nimport {MDBCard, MDBCardBody, MDBCardTitle, MDBCardText, MDBCardImage, MDBBtn} from 'mdb-react-ui-kit';\r\n\r\nclass App extends Component {\r\n\r\n    async componentDidMount() {\r\n        await this.loadWeb3()\r\n        await this.loadBlockchainData()\r\n    }\r\n\r\n    // first detect an ethereum provider\r\n    async loadWeb3() {\r\n        const provider = await detectEthereumProvider()\r\n\r\n        // check for modern browsers\r\n        //if there is a provider then lets log that its working and set web3\r\n        if(provider) {\r\n            console.log('ethereum wallet is connected')\r\n            window.web3 = new Web3(provider)\r\n        } else {\r\n            console.log('no ethereum wallet detected')\r\n        }\r\n    }\r\n\r\n    async loadBlockchainData() {\r\n        const web3 = window.web3\r\n        const accounts = await window.web3.eth.requestAccounts()\r\n        this.setState({account:accounts[0]})\r\n\r\n        const networkId = await web3.eth.net.getId()\r\n        const networkData = KryptoBird.networks[networkId]\r\n\r\n        if(networkData) {\r\n            const abi = KryptoBird.abi\r\n            const address = networkData.address\r\n            const contract = new web3.eth.Contract(abi, address)\r\n            this.setState({contract})\r\n\r\n            const totalSupply = await contract.methods.totalSupply().call()\r\n            this.setState({totalSupply})\r\n\r\n            for(let i=1; i<=totalSupply; i++) {\r\n                const kryptoBird = await contract.methods.kryptoBirdz(i-1).call()\r\n                this.setState({\r\n                    kryptoBirdz:[...this.state.kryptoBirdz, kryptoBird]\r\n                })\r\n            }\r\n        } else {\r\n            window.alert('Smart contract not deployed')\r\n        }\r\n    }\r\n\r\n    mint = (kryptoBird) => {\r\n        this.state.contract.methods.mint(kryptoBird).send({from:this.state.account}).once('receipt', (receipt) => {\r\n            this.setState({\r\n                kryptoBirdz:[...this.state.kryptoBirdz, kryptoBird]\r\n            })\r\n        })\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            account: '',\r\n            contract: null,\r\n            totalSupply: 0,\r\n            kryptoBirdz: []\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {console.log(this.state.kryptoBirdz)}\r\n                <nav className='navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow'>\r\n                    <div className='navbar-brand col-sm-3 col-md-3 mr-0' style={{color:'white'}}>\r\n                        NFT Marketplace!\r\n                    </div>\r\n                    <ul className='navbar-nav px-3'>\r\n                        <li className='nav-item text-nowrap d-none d-sm-none d-sm-block'>\r\n                            <small className=\"text-white\">\r\n                                {this.state.account}\r\n                            </small>\r\n                        </li>\r\n                    </ul>\r\n                </nav>\r\n                <div className=\"container-fluid mt-1\">\r\n                    <div className=\"row\">\r\n                        <main role='main' className=\"col-lg-12 d-flex text-center\">\r\n                            <div className=\"content mr-auto ml-auto\" style={{opacity: '0.8'}}>\r\n                                <h1 style={{color: 'white'}}>G8 - NFT Marketplace</h1>\r\n\r\n                                <form onSubmit={(event) => {\r\n                                    event.preventDefault()\r\n                                    const kryptoBird = this.kryptoBird.value    \r\n                                    this.mint(kryptoBird)\r\n                                }}>\r\n                                    <input type='text' placeholder='Add file location'\r\n                                    className=\"form-control mb-1\"\r\n                                    ref={(input) => this.kryptoBird = input} />\r\n                                    <input type='submit' className=\"btn btn-primary btn-black\"\r\n                                    value=\"MINT\" style={{margin: '6px'}} />\r\n                                </form>\r\n                            </div>\r\n                        </main>\r\n                    </div>\r\n                    <hr/>\r\n                    <div className='row textCenter'>\r\n                        {this.state.kryptoBirdz.map((kryptoBird, key) => {\r\n                            return(\r\n                                <div>\r\n                                    <div>\r\n                                        <MDBCard className='token img' height='250rem' style={{maxWidth:'22rem'}} />\r\n                                        <MDBCardImage src={kryptoBird} position='top' style={{marginRight: '4px'}} />\r\n                                        <MDBCardBody>\r\n                                            <MDBCardTitle>Anime Art</MDBCardTitle>\r\n                                            <MDBCardText>\r\n                                                The description is hardcoded for now. Note: The download button only downloads the image file onto the user's system, it DOES NOT transfer the NFT ownership.\r\n                                            </MDBCardText>\r\n                                            <MDBBtn href={kryptoBird}>Download</MDBBtn>\r\n                                        </MDBCardBody>\r\n                                    </div>\r\n                                </div>\r\n                            )\r\n                        })}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default App;"]},"metadata":{},"sourceType":"module"}